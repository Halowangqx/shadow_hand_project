// Generated by gencpp from file leap_motion/leap_message.msg
// DO NOT EDIT!


#ifndef LEAP_MOTION_MESSAGE_LEAP_MESSAGE_H
#define LEAP_MOTION_MESSAGE_LEAP_MESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace leap_motion
{
template <class ContainerAllocator>
struct leap_message_
{
  typedef leap_message_<ContainerAllocator> Type;

  leap_message_()
    : header()
    , finger_joint()
    , direction()
    , palm_normal()
    , wrist_position()
    , palm_position()  {
    }
  leap_message_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , finger_joint(_alloc)
    , direction(_alloc)
    , palm_normal(_alloc)
    , wrist_position(_alloc)
    , palm_position(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _finger_joint_type;
  _finger_joint_type finger_joint;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _direction_type;
  _direction_type direction;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _palm_normal_type;
  _palm_normal_type palm_normal;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _wrist_position_type;
  _wrist_position_type wrist_position;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _palm_position_type;
  _palm_position_type palm_position;





  typedef boost::shared_ptr< ::leap_motion::leap_message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::leap_motion::leap_message_<ContainerAllocator> const> ConstPtr;

}; // struct leap_message_

typedef ::leap_motion::leap_message_<std::allocator<void> > leap_message;

typedef boost::shared_ptr< ::leap_motion::leap_message > leap_messagePtr;
typedef boost::shared_ptr< ::leap_motion::leap_message const> leap_messageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::leap_motion::leap_message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::leap_motion::leap_message_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::leap_motion::leap_message_<ContainerAllocator1> & lhs, const ::leap_motion::leap_message_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.finger_joint == rhs.finger_joint &&
    lhs.direction == rhs.direction &&
    lhs.palm_normal == rhs.palm_normal &&
    lhs.wrist_position == rhs.wrist_position &&
    lhs.palm_position == rhs.palm_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::leap_motion::leap_message_<ContainerAllocator1> & lhs, const ::leap_motion::leap_message_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace leap_motion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::leap_motion::leap_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leap_motion::leap_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::leap_motion::leap_message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::leap_motion::leap_message_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leap_motion::leap_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leap_motion::leap_message_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::leap_motion::leap_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ff302b5b1d018318c749dd3e6114a72";
  }

  static const char* value(const ::leap_motion::leap_message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ff302b5b1d01831ULL;
  static const uint64_t static_value2 = 0x8c749dd3e6114a72ULL;
};

template<class ContainerAllocator>
struct DataType< ::leap_motion::leap_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "leap_motion/leap_message";
  }

  static const char* value(const ::leap_motion::leap_message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::leap_motion::leap_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64[] finger_joint\n"
"float64[] direction\n"
"float64[] palm_normal\n"
"float64[] wrist_position\n"
"float64[] palm_position\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::leap_motion::leap_message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::leap_motion::leap_message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.finger_joint);
      stream.next(m.direction);
      stream.next(m.palm_normal);
      stream.next(m.wrist_position);
      stream.next(m.palm_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct leap_message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::leap_motion::leap_message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::leap_motion::leap_message_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "finger_joint[]" << std::endl;
    for (size_t i = 0; i < v.finger_joint.size(); ++i)
    {
      s << indent << "  finger_joint[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.finger_joint[i]);
    }
    s << indent << "direction[]" << std::endl;
    for (size_t i = 0; i < v.direction.size(); ++i)
    {
      s << indent << "  direction[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.direction[i]);
    }
    s << indent << "palm_normal[]" << std::endl;
    for (size_t i = 0; i < v.palm_normal.size(); ++i)
    {
      s << indent << "  palm_normal[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.palm_normal[i]);
    }
    s << indent << "wrist_position[]" << std::endl;
    for (size_t i = 0; i < v.wrist_position.size(); ++i)
    {
      s << indent << "  wrist_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.wrist_position[i]);
    }
    s << indent << "palm_position[]" << std::endl;
    for (size_t i = 0; i < v.palm_position.size(); ++i)
    {
      s << indent << "  palm_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.palm_position[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEAP_MOTION_MESSAGE_LEAP_MESSAGE_H
