// Generated by gencpp from file arm_rtde/full.msg
// DO NOT EDIT!


#ifndef ARM_RTDE_MESSAGE_FULL_H
#define ARM_RTDE_MESSAGE_FULL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace arm_rtde
{
template <class ContainerAllocator>
struct full_
{
  typedef full_<ContainerAllocator> Type;

  full_()
    : header()
    , timestamp(0.0)
    , target_joint_position()
    , target_joint_velocity()
    , target_joint_acceleration()
    , target_joint_moments()
    , actual_joint_position()
    , actual_joint_velocity()
    , actual_tcp_pose()
    , actual_tcp_speed()
    , actual_tcp_force()
    , target_tcp_pose()
    , target_tcp_speed()
    , target_tcp_accelerometer()  {
    }
  full_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , timestamp(0.0)
    , target_joint_position(_alloc)
    , target_joint_velocity(_alloc)
    , target_joint_acceleration(_alloc)
    , target_joint_moments(_alloc)
    , actual_joint_position(_alloc)
    , actual_joint_velocity(_alloc)
    , actual_tcp_pose(_alloc)
    , actual_tcp_speed(_alloc)
    , actual_tcp_force(_alloc)
    , target_tcp_pose(_alloc)
    , target_tcp_speed(_alloc)
    , target_tcp_accelerometer(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _target_joint_position_type;
  _target_joint_position_type target_joint_position;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _target_joint_velocity_type;
  _target_joint_velocity_type target_joint_velocity;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _target_joint_acceleration_type;
  _target_joint_acceleration_type target_joint_acceleration;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _target_joint_moments_type;
  _target_joint_moments_type target_joint_moments;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _actual_joint_position_type;
  _actual_joint_position_type actual_joint_position;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _actual_joint_velocity_type;
  _actual_joint_velocity_type actual_joint_velocity;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _actual_tcp_pose_type;
  _actual_tcp_pose_type actual_tcp_pose;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _actual_tcp_speed_type;
  _actual_tcp_speed_type actual_tcp_speed;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _actual_tcp_force_type;
  _actual_tcp_force_type actual_tcp_force;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _target_tcp_pose_type;
  _target_tcp_pose_type target_tcp_pose;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _target_tcp_speed_type;
  _target_tcp_speed_type target_tcp_speed;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _target_tcp_accelerometer_type;
  _target_tcp_accelerometer_type target_tcp_accelerometer;





  typedef boost::shared_ptr< ::arm_rtde::full_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_rtde::full_<ContainerAllocator> const> ConstPtr;

}; // struct full_

typedef ::arm_rtde::full_<std::allocator<void> > full;

typedef boost::shared_ptr< ::arm_rtde::full > fullPtr;
typedef boost::shared_ptr< ::arm_rtde::full const> fullConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_rtde::full_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_rtde::full_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_rtde::full_<ContainerAllocator1> & lhs, const ::arm_rtde::full_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.timestamp == rhs.timestamp &&
    lhs.target_joint_position == rhs.target_joint_position &&
    lhs.target_joint_velocity == rhs.target_joint_velocity &&
    lhs.target_joint_acceleration == rhs.target_joint_acceleration &&
    lhs.target_joint_moments == rhs.target_joint_moments &&
    lhs.actual_joint_position == rhs.actual_joint_position &&
    lhs.actual_joint_velocity == rhs.actual_joint_velocity &&
    lhs.actual_tcp_pose == rhs.actual_tcp_pose &&
    lhs.actual_tcp_speed == rhs.actual_tcp_speed &&
    lhs.actual_tcp_force == rhs.actual_tcp_force &&
    lhs.target_tcp_pose == rhs.target_tcp_pose &&
    lhs.target_tcp_speed == rhs.target_tcp_speed &&
    lhs.target_tcp_accelerometer == rhs.target_tcp_accelerometer;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_rtde::full_<ContainerAllocator1> & lhs, const ::arm_rtde::full_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_rtde

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_rtde::full_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_rtde::full_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_rtde::full_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_rtde::full_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_rtde::full_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_rtde::full_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_rtde::full_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e6a22b02e2647027b44c725d71ee2a8";
  }

  static const char* value(const ::arm_rtde::full_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e6a22b02e264702ULL;
  static const uint64_t static_value2 = 0x7b44c725d71ee2a8ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_rtde::full_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_rtde/full";
  }

  static const char* value(const ::arm_rtde::full_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_rtde::full_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 timestamp\n"
"float64[] target_joint_position\n"
"float64[] target_joint_velocity\n"
"float64[] target_joint_acceleration\n"
"float64[] target_joint_moments\n"
"float64[] actual_joint_position\n"
"float64[] actual_joint_velocity\n"
"float64[] actual_tcp_pose\n"
"float64[] actual_tcp_speed\n"
"float64[] actual_tcp_force\n"
"float64[] target_tcp_pose\n"
"float64[] target_tcp_speed\n"
"float64[] target_tcp_accelerometer\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::arm_rtde::full_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_rtde::full_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.timestamp);
      stream.next(m.target_joint_position);
      stream.next(m.target_joint_velocity);
      stream.next(m.target_joint_acceleration);
      stream.next(m.target_joint_moments);
      stream.next(m.actual_joint_position);
      stream.next(m.actual_joint_velocity);
      stream.next(m.actual_tcp_pose);
      stream.next(m.actual_tcp_speed);
      stream.next(m.actual_tcp_force);
      stream.next(m.target_tcp_pose);
      stream.next(m.target_tcp_speed);
      stream.next(m.target_tcp_accelerometer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct full_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_rtde::full_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_rtde::full_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "target_joint_position[]" << std::endl;
    for (size_t i = 0; i < v.target_joint_position.size(); ++i)
    {
      s << indent << "  target_joint_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.target_joint_position[i]);
    }
    s << indent << "target_joint_velocity[]" << std::endl;
    for (size_t i = 0; i < v.target_joint_velocity.size(); ++i)
    {
      s << indent << "  target_joint_velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.target_joint_velocity[i]);
    }
    s << indent << "target_joint_acceleration[]" << std::endl;
    for (size_t i = 0; i < v.target_joint_acceleration.size(); ++i)
    {
      s << indent << "  target_joint_acceleration[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.target_joint_acceleration[i]);
    }
    s << indent << "target_joint_moments[]" << std::endl;
    for (size_t i = 0; i < v.target_joint_moments.size(); ++i)
    {
      s << indent << "  target_joint_moments[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.target_joint_moments[i]);
    }
    s << indent << "actual_joint_position[]" << std::endl;
    for (size_t i = 0; i < v.actual_joint_position.size(); ++i)
    {
      s << indent << "  actual_joint_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.actual_joint_position[i]);
    }
    s << indent << "actual_joint_velocity[]" << std::endl;
    for (size_t i = 0; i < v.actual_joint_velocity.size(); ++i)
    {
      s << indent << "  actual_joint_velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.actual_joint_velocity[i]);
    }
    s << indent << "actual_tcp_pose[]" << std::endl;
    for (size_t i = 0; i < v.actual_tcp_pose.size(); ++i)
    {
      s << indent << "  actual_tcp_pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.actual_tcp_pose[i]);
    }
    s << indent << "actual_tcp_speed[]" << std::endl;
    for (size_t i = 0; i < v.actual_tcp_speed.size(); ++i)
    {
      s << indent << "  actual_tcp_speed[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.actual_tcp_speed[i]);
    }
    s << indent << "actual_tcp_force[]" << std::endl;
    for (size_t i = 0; i < v.actual_tcp_force.size(); ++i)
    {
      s << indent << "  actual_tcp_force[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.actual_tcp_force[i]);
    }
    s << indent << "target_tcp_pose[]" << std::endl;
    for (size_t i = 0; i < v.target_tcp_pose.size(); ++i)
    {
      s << indent << "  target_tcp_pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.target_tcp_pose[i]);
    }
    s << indent << "target_tcp_speed[]" << std::endl;
    for (size_t i = 0; i < v.target_tcp_speed.size(); ++i)
    {
      s << indent << "  target_tcp_speed[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.target_tcp_speed[i]);
    }
    s << indent << "target_tcp_accelerometer[]" << std::endl;
    for (size_t i = 0; i < v.target_tcp_accelerometer.size(); ++i)
    {
      s << indent << "  target_tcp_accelerometer[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.target_tcp_accelerometer[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_RTDE_MESSAGE_FULL_H
